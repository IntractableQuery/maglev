# file racc_parser.rb 
#  generated by m4 processing of racc_parser.rbm4 
#  DO NOT EDIT THIS FILE , edit the .rbm4 files  
#
# $Id: parser.rb,v 1.7 2005/11/20 17:31:32 aamine Exp $
#
# Copyright (c) 1999-2005 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#
# Hacked by Ben Matasar <ben@dabbledb.com> to work with MagLev.

# Copied from lib and code moved to module MagRp for the internal parser
# by Allen Otis.

module MagRp # [

  class Parser # [
    def _init_counts_array

    end

    def print_counts

      puts "Parser::print_counts,   parser was not generated with   racc.sh -D"

    end
  end # ]

  class RubyParser # [

    # initialziation of MagTemplate is in first opening in  racc_init_parser.rb

    def self.new_instance
      key = :MAGLEV_RubyParser_Template
      system_cls = Maglev.__system
      t = system_cls.session_temp( key )
      if t._equal?(nil)
        t = MagTemplate.dup # make copy of persistent template
        t._bind_instvars
        t._install_wordlist( Keyword.create_transient_wordlist )
        system_cls.session_temp_put( key, t)
      end
      res = t.dup
      res.initialize # lexer and other per-parse state
      res
    end
  end # ]
end # ]

module MagRp # [
  class Parser # [
    ###
    ### do_parse
    ###

    #def do_parse
    #  Maglev - this method not currently used
    #  __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    #end

    #def next_token  # implemented in extras.rb
    #  raise NotImplementedError, "#{self.class}\#next_token is not defined"
    #end

    def _racc_do_parse_rb()
      _racc_init_sysvars
      res = nil
      call_count = 1
      evalact_exc_res = nil
      while true
        begin
          res = catch(:racc_end_parse) {
            _racc_parse_inner(call_count, evalact_exc_res)
          }
          return res
        rescue Exception => ex
          if @debuglevel > 2
            nil.pause  # stop for debugging before altering vstack
          end
          last_len = @save_last_len
          if last_len._not_equal?(nil)
            vstack = @racc_vstack 
            vstack.size=( vstack.size - last_len )
          end
          ex_cls = ex.class
          if ex_cls._equal?(RaccJumpError)
             # when 1 # yyerror
             @racc_user_yyerror = true   # user_yyerror
             evalact_exc_res =  Racc_reduce_n_negated
             call_count += 1 
          else
             if ex_cls._equal?(SyntaxError)
               self.print_saved_warnings
             end
             __reraise(ex)
          end
        end
      end
    end

    def _racc_parse_inner(call_count, evalact_exc_res) # [
      if call_count._equal?(1)
	tok = nil
	act = nil
	i = nil
	# nerr = 0
	# not_eof = true
      else
	# finish evalact loop after a RaccJumpError was rescued
	act = evalact_exc_res
	while act
	  act = _racc_evalact(act)
	end
      end
      # cache instVars in method temps
      caction_check = @action_check
      caction_default = @action_default
      caction_pointer = @action_pointer
      caction_table = @action_table
      cgoto_check = @goto_check
      cgoto_default = @goto_default
      cgoto_pointer = @goto_pointer
      cgoto_table = @goto_table
      cracc_error_status = @racc_error_status
      cracc_read_next = @racc_read_next
      cracc_state = @racc_state
      cracc_t        = @racc_t
      cracc_val      = @racc_val
      creduce_table  = @reduce_table
      ctoken_table = @token_table    # a GsMethodDictionary
      lex = @lexer
      vstack   = @racc_vstack

      while true # [

	if i = caction_pointer[cracc_state[-1]]
	  if cracc_read_next and cracc_t._not_equal?( 0 )   # not EOF
	      tok = lex.advance   #  next_token()
	      cracc_val = lex.yacc_value_
	      @racc_val = cracc_val  # store new value

	      if tok._equal?( :tEOF ) # EOF
		if @env.is_extended
		  # attempt to issue premature eof error
		  tok = :kEND  # and yacc_value will be :eof
		  cracc_t = (ctoken_table.at_otherwise(tok, nil) or 1)
		else
		  cracc_t = 0
		end
		cracc_t = cracc_t
	      else
		cracc_t = ctoken_table.at_otherwise(tok, nil)
		if cracc_t._equal?(nil) #  unless cracc_t
		  cracc_t = 1  # error token
		end
	      end
	      cracc_read_next = false

	  end
	  i += cracc_t
	  unless i >= 0 and
		 act = caction_table[i] and
		 caction_check[i]._equal?( cracc_state[-1] ) # comparing 2 fixnums

	    act = caction_default[cracc_state[-1]]
	  end
	else

	  act = caction_default[cracc_state[-1]]
	end
	while true
# inline  _racc_evalact 
	  ## uncache 
	  #@racc_t = cracc_t
	  #@racc_read_next = cracc_read_next
	  #act = _racc_evalact(act)
		# begin file evalact_body.rbm4
		# undefine the m4 macro l_e_n which conflicts with a method temp
 
 
  while true # [
    if act >= 0
      # if act._equal?(0)   # check not needed
      #   raise_error("_racc_evalact, unexpected act==0")
      # end
      if act._not_equal?(Racc_shift_n)
	# shift
	#

	if cracc_error_status > 0
	  unless cracc_t._equal?( 1 )  # error token
            cracc_error_status -= 1
	    @racc_error_status = cracc_error_status
	  end
	end
	vstack.push( cracc_val )
	cracc_state.push( act )
	cracc_read_next = true
      else
	# accept
	#
	throw( :racc_end_parse, vstack[0])
      end
    else
      if act._not_equal?( Racc_reduce_n_negated)
	# reduce
	#       replaced  catch(:racc_jump) which had only one use case
	#       with rescue of RaccJumpError
#     cracc_state.push _racc_do_reduce( act)
# inline _racc_do_reduce [
	state = cracc_state

	i = act * -3
	len       = creduce_table[i]
	sel = creduce_table[i+2]  # get method_id 

	if sel._equal?( :_reduce_noneOne )
	  # optimization - no net change to vstack
	  # state[-len, len]  = void_array
	  state.size=( state.size - len )

	else

	  # Maglev: optimization , don't make copy of part of stack,
	  #   pass reference to whole stack and offset to val[0]

	  # state[-len, len]  = void_array
	  state.size=( state.size - len )

	  # vstack must be updated AFTER method call
	  #  Maglev:  use_result  is generated as constant true by .y-->.rb processing,
	  #  Maglev: optimization use __perform
	  #    and omit the tmp_v[0] arg since it is never used
	  vstack_siz = vstack.size
	  vofs = vstack_siz - len   # in a reduce method, val[0] is vstack[0 + vofs]

	  # Maglev optimization use two args  , and pass stack and offset
	  @save_last_len = len
	  @racc_t =         cracc_t  # uncache
	  @racc_read_next = cracc_read_next # uncache   


	  vres =  __perform__se( vstack, vofs, sel, 2 )

	  cracc_error_status = @racc_error_status # recache
	  # @racc_t not changed by reduce methods
	  # @racc_read_next not changed by reduce methods

	  # delete last len elements of vstack and push vres
	  vstack[vofs] = vres
	  vstack.size=( vofs + 1)
	end
	reduce_to = creduce_table[i+1]

	k1 = reduce_to - Racc_nt_base
	if i = cgoto_pointer[k1]
	  i += state[-1]
          #  _validate_goto_tables has ensured that
          #  for any non-nil @goto_check[i] , @goto_table[i] is also non-nil
	  if i >= 0 and cgoto_check[i]._equal?( k1 )

	    cracc_state.push( cgoto_table[i] )
	  else

	    cracc_state.push( cgoto_default[k1] )
	  end
	else

	  cracc_state.push( cgoto_default[k1] )
	end
# end inline _racc_do_reduce ]
      elsif act._equal?( Racc_reduce_n_negated )
        # error
        #
	if cracc_t._equal?( 0)   # is EOF
	  throw( :racc_end_parse, nil )
	end
        if cracc_error_status._equal?(0)
          unless @racc_user_yyerror # unless arg[21]    # user_yyerror
            @save_last_len = nil
            on_error( cracc_t, cracc_val, vstack )
          end
        elsif cracc_error_status._equal?(3)
          cracc_read_next = true
        end
        @racc_user_yyerror = false
        cracc_error_status = 3
        while true
          if i = caction_pointer[cracc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = caction_table[i]) and
                caction_check[i]._equal?( cracc_state[-1] )  # comparing 2 fixnums
              break
            end
          end
          if cracc_state.size <= 1
            throw( :racc_end_parse, nil) 
          end
          cracc_state.pop
          vstack.pop
        end
        break # act is result
      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end
    end
    act = nil  # nil is result
    break
  end # ]
		# end file evalact_body.rbm4

   
	  ## recache
	  #cracc_val = @racc_val  
	  #cracc_read_next = @racc_read_next
# end inline  _racc_evalact 

	  unless act
	    break 
	  end

	end
      end # ]
    end # ]

    # _racc_yyparse_rb moved to  racc_init_parser.rb

    ###
    ### common
    ###

  def _racc_evalact(act) # [

    caction_check = @action_check
    caction_pointer = @action_pointer
    caction_table = @action_table
    cgoto_check = @goto_check
    cgoto_default = @goto_default
    cgoto_pointer = @goto_pointer
    cgoto_table = @goto_table
    cracc_error_status = @racc_error_status
    cracc_read_next = @racc_read_next
    cracc_state = @racc_state
    cracc_t        = @racc_t
    cracc_val      = @racc_val
    creduce_table  = @reduce_table
    vstack   = @racc_vstack
		# begin file evalact_body.rbm4
		# undefine the m4 macro l_e_n which conflicts with a method temp
 
 
  while true # [
    if act >= 0
      # if act._equal?(0)   # check not needed
      #   raise_error("_racc_evalact, unexpected act==0")
      # end
      if act._not_equal?(Racc_shift_n)
	# shift
	#

	if cracc_error_status > 0
	  unless cracc_t._equal?( 1 )  # error token
            cracc_error_status -= 1
	    @racc_error_status = cracc_error_status
	  end
	end
	vstack.push( cracc_val )
	cracc_state.push( act )
	cracc_read_next = true
      else
	# accept
	#
	throw( :racc_end_parse, vstack[0])
      end
    else
      if act._not_equal?( Racc_reduce_n_negated)
	# reduce
	#       replaced  catch(:racc_jump) which had only one use case
	#       with rescue of RaccJumpError
#     cracc_state.push _racc_do_reduce( act)
# inline _racc_do_reduce [
	state = cracc_state

	i = act * -3
	len       = creduce_table[i]
	sel = creduce_table[i+2]  # get method_id 

	if sel._equal?( :_reduce_noneOne )
	  # optimization - no net change to vstack
	  # state[-len, len]  = void_array
	  state.size=( state.size - len )

	else

	  # Maglev: optimization , don't make copy of part of stack,
	  #   pass reference to whole stack and offset to val[0]

	  # state[-len, len]  = void_array
	  state.size=( state.size - len )

	  # vstack must be updated AFTER method call
	  #  Maglev:  use_result  is generated as constant true by .y-->.rb processing,
	  #  Maglev: optimization use __perform
	  #    and omit the tmp_v[0] arg since it is never used
	  vstack_siz = vstack.size
	  vofs = vstack_siz - len   # in a reduce method, val[0] is vstack[0 + vofs]

	  # Maglev optimization use two args  , and pass stack and offset
	  @save_last_len = len
	  @racc_t =         cracc_t  # uncache
	  @racc_read_next = cracc_read_next # uncache   


	  vres =  __perform__se( vstack, vofs, sel, 2 )

	  cracc_error_status = @racc_error_status # recache
	  # @racc_t not changed by reduce methods
	  # @racc_read_next not changed by reduce methods

	  # delete last len elements of vstack and push vres
	  vstack[vofs] = vres
	  vstack.size=( vofs + 1)
	end
	reduce_to = creduce_table[i+1]

	k1 = reduce_to - Racc_nt_base
	if i = cgoto_pointer[k1]
	  i += state[-1]
          #  _validate_goto_tables has ensured that
          #  for any non-nil @goto_check[i] , @goto_table[i] is also non-nil
	  if i >= 0 and cgoto_check[i]._equal?( k1 )

	    cracc_state.push( cgoto_table[i] )
	  else

	    cracc_state.push( cgoto_default[k1] )
	  end
	else

	  cracc_state.push( cgoto_default[k1] )
	end
# end inline _racc_do_reduce ]
      elsif act._equal?( Racc_reduce_n_negated )
        # error
        #
	if cracc_t._equal?( 0)   # is EOF
	  throw( :racc_end_parse, nil )
	end
        if cracc_error_status._equal?(0)
          unless @racc_user_yyerror # unless arg[21]    # user_yyerror
            @save_last_len = nil
            on_error( cracc_t, cracc_val, vstack )
          end
        elsif cracc_error_status._equal?(3)
          cracc_read_next = true
        end
        @racc_user_yyerror = false
        cracc_error_status = 3
        while true
          if i = caction_pointer[cracc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = caction_table[i]) and
                caction_check[i]._equal?( cracc_state[-1] )  # comparing 2 fixnums
              break
            end
          end
          if cracc_state.size <= 1
            throw( :racc_end_parse, nil) 
          end
          cracc_state.pop
          vstack.pop
        end
        break # act is result
      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end
    end
    act = nil  # nil is result
    break
  end # ]
		# end file evalact_body.rbm4


    @racc_read_next = cracc_read_next # uncache
    return act
  end  # ]

    def on_error(t, val, vstack)
      # reworked for better messages, not sure how to continue parsing.
      print_saved_warnings
      str = "parse error on value #{val.inspect} "
      hint = ""
      if t._not_equal?(nil)
        str << " #{token_to_str(t)} "
      end
      if val._equal?(nil)
        hint = " (check for incomplete statement)"
        str << hint
      elsif val == 'end'
        if @lexer.near_eos?(3)
          ofs = @env.first_top_level_def_offset
          if ofs > 0
            lnum = @lexer.line_for_offset(ofs)
            hint = " (check end(s) before 'def' near line #{lnum})"
            str << hint
          else
          end
        else
        end
      end
      puts str
      msg = "missing or unexpected #{val.inspect} #{hint}, near line #{@lexer.lineno_} of #{file_name} "
      @syntax_err_count += 1
      raise SyntaxError, msg
    end

    def yyerror(msg = "")
      # Enter error recovering mode.
      #  If this method returns,
      #  parser should enter "error recovering mode". ??
      print_saved_warnings
      msg << ", near line #{@lexer.lineno_} "
      puts "SyntaxError: #{msg}"
      # throw :racc_jump, 1
      @syntax_err_count += 1
      raise RaccJumpError
      # raise SyntaxError, msg
    end

    def yyaccept
      # appears to be unused
      #  Exit parser.
      internal_error('unexpected call to yyaccept')
      # throw :racc_jump, 2
    end

    def leave_error_recovery_mode  # was yyerrok
      # Leave error recovering mode.
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"

      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      # self.class::Racc_token_to_s_table[tok] or raise "[Racc Bug] can't convert token #{tok} to string"
      RubyParser::Racc_token_to_s_table[tok] or raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      #   used for error messages
      # self.class::Racc_token_to_s_table[t]
      if t._equal?(nil)
        "nil"
      else
        RubyParser::Racc_token_to_s_table[t]
      end
    end

   

  end # ]

end # ]
