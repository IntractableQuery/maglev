The ruby parser in the Maglev kernel/parser directory was derived
from Ryan Davis' ruby_parser2.0.2. .  

The code in kernel/parser is a tight integration of all of the following:
  ruby_parser's lexer
  ruby_parser's .y  file
  ruby_parser's supporting .rb files (extras.rb, etc)
    all of above have modifications to emit instances of our AST tree classes,
    and no longer know how to emit instances of the Sexp class.
    The new class encapsulating tokens and byte offsets is RpNameToken .

  (March 2010) The .y file has been renamed to .ym4 and is pre-processed
  with the racc.sh script using m4 , to include/exclude runtime
  implementation of the yTrace() and Y_TRACE_val_vofs tracing (more below).

  Modified strscan.rb integrated with new Regexp primitives in Maglev
  to operate against a C memory copy of the frozen  source string, thus
  reducing  copying between object memory and C memory for Regexp operations
  by the lexer .

  Post-processing of the racc parser generator output with  sed 
  (see file kernel/parser/racc.sh  )  to make constant whan can
  be constant, and delete code paths in the parser engine never used
  by ruby parser.  

  Modified racc parser engine  ( kernel/parser/racc_parser.rb  ),
  which was derived from racc-1.4.6 .
  Includes rework to avoid expensive  parallel assignments
  and access parser state tables from instVars , and is tied to
  the post processing in racc.sh .

  The .ym4 file and the racc_parser.rb now avoid copying the last "len"
  elements of the value stack for each reduce method. Rather 
  the offset to val[0] is passed to each reduce method, and 
  the value stack is truncated as needed after the reduce method returns.
  This reduces garbage creation during parser execution.
  
  Rework of initialization of a parser instance so that we can
  execute the complicated racc initialization once at bootstrap time,
  and then just  dup and  reset  a committed instance to start
  a new parse .

  Rework of class Environment to make extend and unextend cheaper.
  See comments in rp_classes.rb .

  Code style changes to access instVars directly instead of using accessor
  methods within class that defines an instVar .
  Lexer rework to change very simple regular expressions to 
  use   equal?( ?X )   style of checks for a single character where possible.
  Lexer rework to have lexer state values be Fixnums, with bit values
  arranged to make compare of one of many states faster.
  The coding style is what we are using within Maglev's bootstrap code,
  and takes advantage of things like  equal?  being compiled direct to
  a bytecode, etc.   

  Comments with TODO in ruby_parser2.0.2 were changed to say TODO202 .
  Other TODO in comments represent additional Maglev issues.

Our current goal is 1.8 compatiblity and the above code will
need more work before it will run or be efficient in 1.9 .

As of 5 June 09, algorithmic changes since ruby_parser2.0.2 include

  Emitting instances of RpNameToken as the yacc_value for many tokens
  from the lexer, so accurate byte offsets in the source string are available
  for the AST nodes.

  Emitting instances of DefnNameToken for :kDEF token , containing
  both a line number and a byte offset for start of a method definition.

  Changes to parsing of heredoc's to allow the input string to be frozen,
  and to have heredocs' not upset byte offset computations.
  This is accomplished by a stack of source regions representing additional
  regions of the source to be lexed  after an EOF on the current source
  region is reached.  See instVar  @src_regions  in lexer.rb, 
  and class SrcRegion .

  Heuristics to give message with approximate position of a missing "end"
  when a missing "end" is detected at end of file.
  See uses of the instVar  @extend_ofs_last_unextend  ,
  and implementation and uses of the method   last_closed_def_offset  
  in files rp_classes.rb , extras.rb .  The reported position of the
  missing end will not be 100% accurate, but for the common case of
  a def/class/module/if  missing an "end" ,  an approximate line number
  is given for the last def/class/module which was successfully closed
  out during parsing.  

  Fixes to lexer to parse these symbol literals
     :-@
     :+@
  See code for second occurrance of :tSYMBOL  in lexer.rb.

  Added one more case of enforcement of Symbols not allowed to 
  contain the null character.
  See first occurrance of "symbol cannot contain" in lexer.rb 

Merged changes from ruby_parser2.0.3 
  no substantive differences that affect Maglev code

Fixes for Maglev Trac 567
  ruby_parser2.0.3  code does not correctly lex a string of the form
    "%w(abc\tdef)"
  Added a  \t  to the Regexp near comment 'to pick up whatever'
  in 'def tokadd_string' in lexer.rb .

  In 'def advance' near the comment "# Fix Trac 567" , 
  changed the return token based on "is_arg" and shutoff the
  arg_ambiguous warning , 
  to handle parsing of a Ruby 1.8 multi-line statement 
  with first line ending in a '+' like this:
    a = 10.0
    b = 20.0
    jd = a.floor +
        b
    # end of example

Fix Maglev Trac 565
  ruby_parser2.0.3 code in "def new_regexp" in extras.rb is incorrect.
  In the original code, the loop  "options.split(//).each do"
  probably needs to use   "o |= v" instead of "o += v"
  to handle the case of redundant/duplicate specification letters 
  in the options string, per ruby specs

Lexing of Octal numbers
  ruby_parser2.0.3 code in lexer.rb,  
     when src.scan(/[+-]?0o?[0-7_]*[89]/) then
       rb_compile_error "Illegal octal digit."
     when src.scan(/[+-]?0o?[0-7_]+|0o/) then
       int_with_base(8)
  should be
     when src.scan(/[+-]?0(o|O)?[0-7_]*[89]/) then
       rb_compile_error "Illegal octal digit."
     when src.scan(/[+-]?0(o|O)?[0-7_]+|0o/) then
       int_with_base(8)
  to allow either upper or lower case 'o' after the leading zero, per ruby specs.

Lexing of double quoted strings (Maglev Trac 580)
  This  regex search in ruby_parser2.0.3 lexer.rb :
     elsif src.scan(/\"(#{ESC_RE}|#(#{ESC_RE}|[^\{\#\@\$\"\\])|[^\"\\\#])*\"/o) then
  does not parse this code correctly:
      cx = "\C-\\"
      # d = "junk"
  The string cx winds up including part of the next line,  '# d = ' .
  Current fix is to use a much simpler regex
    s_matched = src.scan(/\"( |\t|\w)*\"/o)
  to parse simple double quoted string containing space, tab, alpha or digit chars
  and otherwise use the tSTRING_BEG   path for complex string lexing

22 September 2009
  For this source code
       class A
         eval "class B; end"
         def c
           class C; end
         end
       end
  got infinite loop after the parse error 'class definition in method body'
  after the call to yyerror to report the error 'class definition in method body'.
  Maglev parser reported 'class definition in method body'
  for each subequent line in the source and then
  went into an infinite loop handling the EOF  token.
  To fix, in ruby_parser.ym4 , for  production 'kCLASS cpath superclass'
  changed the   yyerror    call to just     raise SyntaxError
  and terminate the parsing.

5 Oct 2009
  In the lexer , this code in Ryan's original 
         elsif src.scan(/\$\W|\$\z/) then # TODO: remove?
            self.lex_state = :expr_end
            self.yacc_value = "$"
            return "$"
  was replaced by
         elsif src.check_advance(/\$\W|\$\z/) then 
            rb_compile_error "unexpected whitespace after '$' "  
  to handle the case of a malformed comment line which has $ instead of #,  
  such as:
     $ a comment line

  Added more code to lexer.rb to handle parse errors in single quoted strings,
  in lexer.rb see occurrances of text 
     unterminated single-quoted string meets end
  Not sure if this defect was present in Ryan's original sources.

13 Oct 2009
  Moved the  class Keyword to rp_classes_rb and installed Keyword::WORDLIST
  into an instVar in the lexer at lexer initialization.
  Change the values in the Hash Keyword::WORDLIST to be 3-element arrays
  instead of instances of KWtable , for faster access.

  Added 'near line NNN' text to the warning 'else without rescue is useless'
  since that warning can occur when there are too many 'end' in a method.
  See @last_else_src_offset in the lexer .

  Added a heuristic to generate the text
      check end(s) before 'def' near line NNN
  for the situation when there are too many 'end' in a method and the next 'def'
  is at top level of the file instead of within a class/module .
  Uses new instVar @first_top_level_def_offset in Env , and related methods.

11 Nov 2009
  Changes to lexer.rb and ruby_parser.ym4 , to have yacc_value for tXSTRING_BEG 
  encapsulated in an RpNameToken , so that source position of the tXSTRING_BEG 
  can be installed in the AST .
  Various changes to optimize constant references, based on profiling.

13 Nov 2009
  Added logic to tokadd_string() in Lexer, to count end-of-lines
  contained in a double-quoted string constant , see  uses of  _count_eols  

23 Nov 2009
  For the original code in racc_parser.rb
      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
   Change the Maglev logic to be equivalent to
      elsif act == -reduce_n
        #
        # error
        #
        if @racc_t == 0   # is $
          throw :racc_end_parse, nil
        end
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          @racc_read_next = true
        end
   To avoid infinite loop when  production of
      SyntaxError: empty symbol literal 
   is followed by EOF

   For these error paths in  ruby_parser.ym4,
     "BEGIN in method"   
     "module definition in method body"
     "formal argument cannot be a constant: 
     "formal argument cannot be an instance variable"
     "formal argument cannot be a class variable"
   change from calling yyerror to   raise SyntaxError to avoid infinite shift
   after hitting EOF .

   In ruby_parser.ym4 , make all paths with
     "dynamic constant assignment" 
   use     raise SyntaxError     to ensure errors get raised

   In     def assignable      in  extras.rb,
   add logic to detect dynamic constant assignment, for a case
   not detected in the .ym4 file.

24 Nov 2009
  More optimization based on profiling with Maglev::Gprof, which
  showed that the racc state machine was taking a lot more time
  than the lexer.
  This cuts the time spent in the racc state machine in half.
  Use m4 preprocessor to inline the body of _racc_evalact in the new 
  method _racc_parse_inner, and move the rescue of exceptions out 
  of _racc_parse_inner.  Also put the lexer through m4 so we
  don't do debug printout checks in the production code.
  The source  files   evalact_body.rbm4  racc_parser.rbm4 lexer.rbm4
  are now used to produce generated files racc_parser.rb, lexer.rb .
  racc.sh now takes a -D option if you want to enable detailed debug
  printing in the parser. 

17 Dec 2009
  Add warning about malformed elsif
  and disallow    elseif    in a vcall or fcall message send .
  See  def/uses of check_selector() in extras.rb .
  If disallowing  elseif  breaks existing Ruby code we will backoff the check.
  Inspired by wasting an hour+ debugging a problem in bootstrap/Hash.rb 
  caused by  an    if ... elseif ... end     statement, which is legal syntax
  and never executes the intended else clause .

22 Jan 2010
  Fix Trac653 in the lexer.   
  Regex calls like  src.check(/\s/) were not translated correctly to
  optimized forms.  Added  peek_is_white__or_eol , ch_is_white__or_eol in strscan2.rb ,
  and uses in lexer.rbm4 to implement the fix.

24 Feb 2010
  Implemented print_saved_warnings(), includes logic to get 
  warning level from SessionTemps , and suppress printing of  
  warnings unless warnings specified by user or a syntax error occurs.
  Changed uses of raise_error() to internal_error() .
  Added syntax_error() .

March 2010
  To support changes for 1.8.7, renamed ruby_parser.y to ruby_parser.ym4 .
  File ruby_parser.y is produced by the racc.sh script as an output
  of m4, using ruby_parser.ym4 as an input.

  Edited ruby_parser.ym4 to add yTrace() and Y_TRACE_val_vofs()
  macro calls to provide more readable runtime tracing of the parser.

  Renamed some of the items in the grammar to avoid short names being
  substrings within longer names, for easier searching with a text editor.
        old grammar item        new grammar item
        -----------------        ------------------
        aref_args                aref__args
        block_var                blck_var
        bodystmt                 body_stamt
        brace_block              brace_blck
        compstmt                 comp_stamt
        mlhs                     mLhs
        opt_terms                opt_termms
        stmts                    sttmts
        term                     Term
        var_lhs                  varLhs

  For Ruby 1.8.7, added the productions 
     mlhs_basic: | mlhs_head tAMPER variable
     mlhs_basic: | tAMPER variable 
  and the append_for_mlhs() method to implement block parameter for a block

  Found the following problems in the original ruby_parser.y grammar file,
    For the production
       undef_list:  | undef_list tCOMMA
    there is no assignment to   result 
    For the production
       open_args: | tLPAREN_ARG
    there is no assignment to   result 

  Fixed double increment of @line_num in tokadd_string() in lexer,
  seen when parsing multi-line Regex constants, by moving the
     @line_num += num_eols
  outside of the loop  beginning with
     until src.eos? do

  Fix missing increment of @line_num when processing line ending with ?\  .

  Fix lexer detection of __END__  to work with DOS files (with cr-lf end-of-lines)

May 2010
  Fix code in extras.rb and related methods in RubyNode.rb to detect and
  raise SyntaxError 'void value expression'  for expressions using
  result of a    break, next or return    as input to a method call ,
  expression, or assignment.
  'void value expression'  was not detected by  ruby_parser2.0.3  original code
 
June 2010
  Changed the WORDLIST table used by the lexer to further optimize
  the lexing of keywords.  See comments in the code. 

July 2010
  Fix loss of statements. (See Trac764)
  In the ruby_parser2.0.3  original code ,
    220   def block_append(head, tail, strip_tail_block=false)
    221     return head unless tail
    222     return tail unless head
    223 
    224     case head[0]
    225     when :lit, :str then
    226       return tail
    227     end
  lines 224..227 inclusive should be deleted.
       

