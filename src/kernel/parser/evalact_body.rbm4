		# begin file evalact_body.rbm4
		# undefine the m4 macro l_e_n which conflicts with a method temp
undefine(`len') 
 
  while true # [
    if act >= 0
      # if act._equal?(0)   # check not needed
      #   raise_error("_racc_evalact, unexpected act==0")
      # end
      if act._not_equal?(Racc_shift_n)
	# shift
	#
ifdef(`PARSER_DEBUG', `
        @counts_array[7] += 1 # evalact_shift
')
	if cracc_error_status > 0
	  unless cracc_t._equal?( 1 )  # error token
            cracc_error_status -= 1
	    @racc_error_status = cracc_error_status
	  end
	end
	vstack.push( cracc_val )
	cracc_state.push( act )
	cracc_read_next = true
      else
	# accept
	#
	throw( :racc_end_parse, vstack[0])
      end
    else
      if act._not_equal?( Racc_reduce_n_negated)
	# reduce
	#       replaced  catch(:racc_jump) which had only one use case
	#       with rescue of RaccJumpError
#     cracc_state.push _racc_do_reduce( act)
# inline _racc_do_reduce [
	state = cracc_state

	i = act * -3
	len       = creduce_table[i]
	sel = creduce_table[i+2]  # get method_id 

	if sel._equal?( :_reduce_noneOne )
	  # optimization - no net change to vstack
	  # state[-len, len]  = void_array
	  state.size=( state.size - len )
ifdef(`PARSER_DEBUG', `
	  @counts_array[8] += 1 # reduce_noneOne
	  if @mydebug 
            Kernel.print("_reduce_noneOne \n")
          end
')
	else

	  # Maglev: optimization , don't make copy of part of stack,
	  #   pass reference to whole stack and offset to val[0]

	  # state[-len, len]  = void_array
	  state.size=( state.size - len )

	  # vstack must be updated AFTER method call
	  #  Maglev:  use_result  is generated as constant true by .y-->.rb processing,
	  #  Maglev: optimization use __perform
	  #    and omit the tmp_v[0] arg since it is never used
	  vstack_siz = vstack.size
	  vofs = vstack_siz - len   # in a reduce method, val[0] is vstack[0 + vofs]

	  # Maglev optimization use two args  , and pass stack and offset
	  @save_last_len = len
	  @racc_t =         cracc_t  # uncache
	  @racc_read_next = cracc_read_next # uncache   
ifdef(`PARSER_DEBUG', `
	  if @mydebug 
            Kernel.print(" #{sel} ") # end-of-line printed by yDebugTrace 
          end
	  @counts_array[9] += 1 # perform_reduce
')

	  vres =  __perform__se( vstack, vofs, sel, 2 )

	  cracc_error_status = @racc_error_status # recache
	  # @racc_t not changed by reduce methods
	  # @racc_read_next not changed by reduce methods

	  # delete last len elements of vstack and push vres
	  vstack[vofs] = vres
	  vstack.size=( vofs + 1)
	end
	reduce_to = creduce_table[i+1]

	k1 = reduce_to - Racc_nt_base
	if i = cgoto_pointer[k1]
	  i += state[-1]
          #  _validate_goto_tables has ensured that
          #  for any non-nil @goto_check[i] , @goto_table[i] is also non-nil
	  if i >= 0 and cgoto_check[i]._equal?( k1 )
ifdef(`PARSER_DEBUG', `
	    @counts_array[10] += 1 # evalact_gotoA
')
	    cracc_state.push( cgoto_table[i] )
	  else
ifdef(`PARSER_DEBUG', `
	    @counts_array[11] += 1 # evalact_defaultA
')
	    cracc_state.push( cgoto_default[k1] )
	  end
	else
ifdef(`PARSER_DEBUG', `
	  @counts_array[12] += 1 # evalact_defaultB
')
	  cracc_state.push( cgoto_default[k1] )
	end
# end inline _racc_do_reduce ]
      elsif act._equal?( Racc_reduce_n_negated )
        # error
        #
	if cracc_t._equal?( 0)   # is EOF
	  throw( :racc_end_parse, nil )
	end
        if cracc_error_status._equal?(0)
          unless @racc_user_yyerror # unless arg[21]    # user_yyerror
            @save_last_len = nil
            on_error( cracc_t, cracc_val, vstack )
          end
        elsif cracc_error_status._equal?(3)
          cracc_read_next = true
        end
        @racc_user_yyerror = false
        cracc_error_status = 3
        while true
          if i = caction_pointer[cracc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = caction_table[i]) and
                caction_check[i]._equal?( cracc_state[-1] )  # comparing 2 fixnums
              break
            end
          end
          if cracc_state.size <= 1
            throw( :racc_end_parse, nil) 
          end
          cracc_state.pop
          vstack.pop
        end
        break # act is result
      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end
    end
    act = nil  # nil is result
    break
  end # ]
		# end file evalact_body.rbm4

