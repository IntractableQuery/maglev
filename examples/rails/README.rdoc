= Notes on MagLev and Rails 3

The files in this directory allow you to run the default Rails app on
MagLev.  Currently, MagLev is able to serve static and (simple) dynamic
pages using a patched version of Rails 3 Beta 4.  The <tt>Rakefile</tt>
provides tasks to setup your MagLev environment with the correct (patched)
Rails Gems and other gems.

== Quick Start

1. Make sure the MagLev repository is running:
     $ cd $MAGLEV_HOME
     $ rake maglev:start      # or: $MAGLEV_HOME/bin/maglev start

2. Install Rails, patch it and install other gems and set ENVIRONMENT:
     $ cd $MAGLEV_HOME/examples/rails
     $ rake init

   Set ENVIRONMENT.  ActiveSupport and the MySQL driver both require
   MagLev's <tt>-MallIvsDynamic</tt> option (i.e., most of the subsequent
   steps):
       $ export MAGLEV_OPTS="-MallIvsDynamic"

3. Setup the Database.  MagLev currently supports MySQL, so:
   A. Ensure mysql is running
   B. Ensure <tt>myapp/config/database.yml</tt> is configured for your
      system (user, password, etc.)
   C. Create the db
       $ cd $MAGLEV_HOME/examples/rails/myapp
       $ $MAGLEV_HOME/bin/rake db:create

3. Run the app:
     $ cd $MAGLEV_HOME/examples/rails/myapp
     $ $MAGLEV_HOME/bin/rails server
   Then hit http://localhost:3000/

== Rails on MagLev: Status

There is still a lot of work before Rails on MagLev is fully cooked.  You
should expect some spurious error messages and errors (especially in
logging) that do not affect page loading.  We fully expect there to be
other bugs as pages get more complex and as you add more gems and use other
features.

The most notable problem is that routes are sometimes broken (defaults).

=== Slow start up

There are a couple of pauses when starting rails and when loading the first
page.  The first pause is loading and compiling all the rails code:

  <long pause>
  [2010-06-24 12:54:37] INFO  WEBrick 1.3.1
  [2010-06-24 12:54:37] INFO  ruby 1.8.7 (2010-02-26) [x86_64-darwin]
  [2010-06-24 12:54:37] INFO  WEBrick::HTTPServer#start: pid=45167 port=3000

The second and third pauses occur when you hit the first static and first
dynamic page.  All of these pauses are due to MagLev parsing and compiling
Ruby code.  Subsequent dynamic page loads should be much quicker, as MagLev
only has to compile the code once.  If you are running in development mode,
you'll see a couple of files get reloaded for every page, but that should
disappear if you run in production mode.

If you are interested in seeing the progress of file loads, use the
<tt>-MtraceLoad</tt> flag to <tt>maglev-ruby</tt> (you can set it on
the command line, or add it to the <tt>MAGLEV_OPTS</tt> env variable).

== Changes to +myapp+

These are the changes to the standard sample app in order to run under
MagLev:

* The following command was used to create +myapp+:
    $ $MAGLEV_HOME/bin/rails new myapp --database=mysql

* Edited <tt>myapp/Gemfile</tt> to use <tt>ruby-mysql</tt> gem.  Change
  <tt>gem 'mysql'</tt> to <tt>gem 'ruby-mysql', :require => 'mysql'</tt>.

* <tt>myapp/config/boot.rb</tt> was edited to work around {Trac
  757}[https://magtrac.gemstone.com/ticket/757]. See the track report for
  details on the workaround.

* In order to get the "About your application's environment" link on the
  index page to work, there has to be a route defined in
  <tt>myapp/config/routes.rb</tt>.  The demo app has a route added, so the
  sample URL should work. See {Trac
  766}[https://magtrac.gemstone.com/ticket/766].

=== Changes to Rails Code

The changes to the rails code are rather minimal.  To get a good look:

  $ rake dev:checkout && cd rails && git diff maglev-beta4 v3.0.0.beta4

or browse to: http://github.com/MagLev/rails/compare/master...maglev-beta4

You must pass the <tt>-MallIvsDynamic</tt> flag to MagLev in order to run
rails (the +Rakefile+ does this).  See
<tt>docs/release_notes</tt>[link:files/docs/release_notes.html] for a
discussion of <tt>-MallIvsDynamic</tt>.

=== Progress towards full Rails Lifecycle

The following steps are loosely based on the {Rails Blog
Tutorial}[http://guides.rails.info/getting_started.html]. We are using
these steps to drive forward on getting Rails working. Assuming you've
patched ActiveSupport as described above, and you apply the patch to the
generated app (as described in step 2), then this is the current status:

1. Install rails: <tt>maglev-gem install rails --pre</tt> (works)
2. Create new rails app: <tt>$MAGLEV_HOME/bin/rails new blog</tt> (works)
3. Run +bundle+: <tt>$MAGLEV_HOME/bin/bundle install</tt> (works)
4. Create the database: <tt>$MAGLEV_HOME/bin/rake db:create</tt> (works)
5. Start server: <tt>$MAGLEV_HOME/bin/rails server</tt> (works)
6. Load a static page: http://localhost:3000/ (works)
7. Load a dynamic page: http://localhost:3000/rails/info/properties (works;
   but needs at least one route in <tt>routes.rb</tt>)
8. Generate new controller: <tt>$MAGLEV_HOME/bin/rails generate controller
   home index</tt> (works)
9. Running a migrations: <tt>$MAGLEV_HOME/bin/rake db:migrate</tt> (works)
10. Running the rails console: <tt>$MAGLEV_HOME/bin/rails console</tt>
    (untested)
11. Run application unit tests (untested)

Once the basic life-cycle works, we plan on getting the Rails Specs to
pass.

Detailed explanations of each step follow.

==== 1. Install rails: Works

Rails installs from gems, but needs one patch.

To install the rails gems,
you can run <tt>rake init</tt>, or do the following:

Install non-rails gems:

  $ maglev-gem install --no-ri --no-rdoc rack tzinfo i18n rack-mount erubis mail ruby-mysql
  Successfully installed rack-1.2.1
  Successfully installed tzinfo-0.3.22
  Successfully installed i18n-0.4.1
  Successfully installed rack-mount-0.6.9
  Successfully installed abstract-1.0.0
  Successfully installed erubis-2.6.6
  Successfully installed activesupport-2.3.8
  Successfully installed mime-types-1.16
  Successfully installed polyglot-0.3.1
  Successfully installed treetop-1.4.8
  Successfully installed mail-2.2.5
  Successfully installed ruby-mysql-2.9.3
  12 gems installed

Install rails gems:

  $ maglev-gem install rails --pre --no-ri --no-rdoc
  Successfully installed activesupport-3.0.0.beta4
  Successfully installed builder-2.1.2
  Successfully installed activemodel-3.0.0.beta4
  Successfully installed rack-1.1.0
  Successfully installed rack-test-0.5.4
  Successfully installed actionpack-3.0.0.beta4
  Successfully installed arel-0.4.0
  Successfully installed activerecord-3.0.0.beta4
  Successfully installed activeresource-3.0.0.beta4
  Successfully installed actionmailer-3.0.0.beta4
  Successfully installed rake-0.8.7
  Successfully installed thor-0.13.7
  Successfully installed railties-3.0.0.beta4
  Successfully installed bundler-0.9.26
  Successfully installed rails-3.0.0.beta4
  15 gems installed

To patch ActiveSupport, you can either do:
  $ rake patch:activesupport
or:
  $ cd $MAGLEV_HOME/lib/maglev/gems/1.8/gems/activesupport-3.0.0.beta4
  $ patch -p2 < $MAGLEV_HOME/examples/rails/patches/active_support_1.diff
  patching file lib/active_support/core_ext/class/subclasses.rb

The patch changes the manner in which all subclasses are found.  MagLev
does not support <tt>ObjectSpace#each_object</tt> (since objects may be
persisted, there can be hundres of millions of them...).  This patch allows
finding all subclasses currently loaded in a VM.  The ActiveSupport file
already has patches for Rubinius and JRuby.  We expect to submit this patch
to Rails.

==== 2. Create new rails app: Works, but then must patch app files.

Run:
  $ $MAGLEV_HOME/bin/rails new myapp --database=mysql

The new app is correctly built, but there are two items that need to be
upated in the new app.

1. Copy the patched version of <tt>boot.rb</tt> into your application.
   This is a work-around for  {Trac
   757}[https://magtrac.gemstone.com/ticket/757].
       $ cp $MAGLEV_HOME/examples/rails/patches/app_config_boot_Trac757.rb myapp/config/boot.rb

2. Edit <tt>myapp/Gemfile</tt> and change:
     gem 'mysql'
   to:
     gem 'ruby-mysql', :require => 'mysql'

==== 3. Run +bundle+: Works.

Run:
  $ cd myapp
  $ $MAGLEV_HOME/bin/bundle install

==== 4. Create the database: Works.

Run:
  $ $MAGLEV_HOME/bin/rake db:create

You should now see your application databases defined in MySQL.

==== 5. Start server: Works.

MagLev needs the <tt>-MallIvsDynamic</tt> option set in order to run
Rails.  The most robust way to set this is through the <tt>MAGLEV_OPTS</tt>
environment variable.  This will ensure the flag gets passed from the
+rails+ script onto <tt>maglev-ruby</tt>.

You can start the server in a couple of ways.  The normal way to start a
rails server is:
  $ export MAGLEV_OPTS="-MallIvsDynamic"
  $ cd myapp
  $ $MAGLEV_HOME/bin/rails server

An alternate method is:

  $ cd myapp
  $ maglev-ruby -MallIvsDynamic script/rails server

==== 6. Load a static page: Works.

Static pages in the app load fine under MagLev.

==== 7. Load a dynamic page: Works.

Simple dynamic pages work fine under MagLev.  There is a slight problem
with the default rails info routes, if no routes are defined in
<tt>route.rb</tt>.  Workaround is to add some route or other.

==== 8. Generate new controllers and scaffolding: Works (but resource
routes break routing)

With the patch <tt>boot.rb</tt> patch described above, you can run:
  $ $MAGLEV_HOME/bin/rails generate controller home index
and generate the expected files.

If you remove <tt>public/index.html</tt> and add <tt>root :to =>
"home#index"</tt> into <tt>config/routes.rb</tt>, you should be able to hit
http://localhost:3000/ and see <tt>home#index</tt>

You can also create scaffolding:
  $ $MAGLEV_HOME/bin/rails generate scaffold Post name:string title:string content:text
Unfortunately, this adds <tt>resources :posts</tt> to <tt>routes.rb</tt>,
and that seems to break the other routes...

==== 9. Running a migrations: Works.

Assuming you've generated the scaffolding in the previous step, you can do:
  $ $MAGLEV_HOME/bin/rake db:migrate
which seems to work.

==== 10. Running the rails console: untested

Running <tt>$MAGLEV_HOME/bin/rails console</tt> is untested.

==== 11. Running the tests: untested

Running the application's unit tests has not yet been tested.

== Alternate rails patch option (deprecated)

The method described in this section is not the preferred manner to run
patched rails, but may be used.  This method is mostly to ease MagLev
development and rails patch management for MagLev developers.

An alternative way to get a patched rails is to checkout the MagLev rails
fork, and use one of the maglev-* branches.  This requires adjusting the
load path.  The rake tasks in the <tt>:dev</tt> namespace manage this
alternate method of running a patched rails version.

To checkout MagLev patched fork of Rails, and run the app from that:

  $ rake gem:gems             # Installs required non-rails gems
  $ rake dev:checkout         # Checksout patched version of rails from GitHub
  $ rake dev:app              # Run myapp using ./rails version of rails.


